{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USER\\\\Desktop\\\\servix-cmms\\\\frontend\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// frontend/src/context/AuthContext.js\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport api from '../utils/api';\n\n// Create the Auth Context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\n\n// Custom hook to use the Auth Context\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\n// Auth Provider Component\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState('');\n\n  // Check if user is already logged in (on component mount)\n  useEffect(() => {\n    const loadUser = async () => {\n      const token = localStorage.getItem('token');\n      if (token) {\n        try {\n          // Set the authorization header for all API requests\n          api.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n\n          // Get user data from the server\n          const response = await api.get('/auth/me');\n\n          // Set user data and authentication state\n          setUser(response.data.user);\n          setIsAuthenticated(true);\n          setError('');\n        } catch (error) {\n          // If token is invalid or expired, remove it and reset state\n          localStorage.removeItem('token');\n          delete api.defaults.headers.common['Authorization'];\n          setUser(null);\n          setIsAuthenticated(false);\n          setError('Session expired. Please log in again.');\n        }\n      }\n      setLoading(false);\n    };\n    loadUser();\n  }, []);\n\n  // Login function - request OTP\n  const requestOTP = async serviceNumber => {\n    try {\n      setLoading(true);\n      setError('');\n      const response = await api.post('/auth/request-otp', {\n        serviceNumber\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response, _error$response$data;\n      setError(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Failed to send OTP');\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Verify OTP and login\n  const verifyOTP = async (serviceNumber, otp) => {\n    try {\n      setLoading(true);\n      setError('');\n      const response = await api.post('/auth/verify-otp', {\n        serviceNumber,\n        otp\n      });\n\n      // Store token in localStorage\n      localStorage.setItem('token', response.data.token);\n\n      // Set authorization header for future requests\n      api.defaults.headers.common['Authorization'] = `Bearer ${response.data.token}`;\n\n      // Set user data and authentication state\n      setUser(response.data.user);\n      setIsAuthenticated(true);\n      return response.data;\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      setError(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || 'Failed to verify OTP');\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Logout function\n  const logout = () => {\n    // Remove token from localStorage\n    localStorage.removeItem('token');\n\n    // Remove authorization header\n    delete api.defaults.headers.common['Authorization'];\n\n    // Reset user state\n    setUser(null);\n    setIsAuthenticated(false);\n    setError('');\n  };\n\n  // Clear error\n  const clearError = () => {\n    setError('');\n  };\n\n  // Check if user has a specific role\n  const hasRole = role => {\n    if (!user || !user.role) return false;\n\n    // Convert role to proper case (Engineer, Admin, Technician)\n    const normalizedRole = role.charAt(0).toUpperCase() + role.slice(1).toLowerCase();\n    return user.role === normalizedRole;\n  };\n\n  // Check if user is admin or engineer (full access)\n  const hasFullAccess = () => {\n    return hasRole('Admin') || hasRole('Engineer');\n  };\n\n  // Value object to be provided to consumers\n  const value = {\n    user,\n    isAuthenticated,\n    loading,\n    error,\n    requestOTP,\n    verifyOTP,\n    logout,\n    clearError,\n    hasRole,\n    hasFullAccess\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 149,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"jcgNzCoL0poPKeP7i95QIaSsnUs=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","api","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","isAuthenticated","setIsAuthenticated","loading","setLoading","error","setError","loadUser","token","localStorage","getItem","defaults","headers","common","response","get","data","removeItem","requestOTP","serviceNumber","post","_error$response","_error$response$data","message","verifyOTP","otp","setItem","_error$response2","_error$response2$data","logout","clearError","hasRole","role","normalizedRole","charAt","toUpperCase","slice","toLowerCase","hasFullAccess","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/USER/Desktop/servix-cmms/frontend/src/context/AuthContext.js"],"sourcesContent":["// frontend/src/context/AuthContext.js\r\nimport React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport api from '../utils/api';\r\n\r\n// Create the Auth Context\r\nconst AuthContext = createContext();\r\n\r\n// Custom hook to use the Auth Context\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (!context) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\n// Auth Provider Component\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState('');\r\n\r\n  // Check if user is already logged in (on component mount)\r\n  useEffect(() => {\r\n    const loadUser = async () => {\r\n      const token = localStorage.getItem('token');\r\n      \r\n      if (token) {\r\n        try {\r\n          // Set the authorization header for all API requests\r\n          api.defaults.headers.common['Authorization'] = `Bearer ${token}`;\r\n          \r\n          // Get user data from the server\r\n          const response = await api.get('/auth/me');\r\n          \r\n          // Set user data and authentication state\r\n          setUser(response.data.user);\r\n          setIsAuthenticated(true);\r\n          setError('');\r\n        } catch (error) {\r\n          // If token is invalid or expired, remove it and reset state\r\n          localStorage.removeItem('token');\r\n          delete api.defaults.headers.common['Authorization'];\r\n          setUser(null);\r\n          setIsAuthenticated(false);\r\n          setError('Session expired. Please log in again.');\r\n        }\r\n      }\r\n      \r\n      setLoading(false);\r\n    };\r\n\r\n    loadUser();\r\n  }, []);\r\n\r\n  // Login function - request OTP\r\n  const requestOTP = async (serviceNumber) => {\r\n    try {\r\n      setLoading(true);\r\n      setError('');\r\n      \r\n      const response = await api.post('/auth/request-otp', { serviceNumber });\r\n      \r\n      return response.data;\r\n    } catch (error) {\r\n      setError(error.response?.data?.message || 'Failed to send OTP');\r\n      throw error;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Verify OTP and login\r\n  const verifyOTP = async (serviceNumber, otp) => {\r\n    try {\r\n      setLoading(true);\r\n      setError('');\r\n      \r\n      const response = await api.post('/auth/verify-otp', { serviceNumber, otp });\r\n      \r\n      // Store token in localStorage\r\n      localStorage.setItem('token', response.data.token);\r\n      \r\n      // Set authorization header for future requests\r\n      api.defaults.headers.common['Authorization'] = `Bearer ${response.data.token}`;\r\n      \r\n      // Set user data and authentication state\r\n      setUser(response.data.user);\r\n      setIsAuthenticated(true);\r\n      \r\n      return response.data;\r\n    } catch (error) {\r\n      setError(error.response?.data?.message || 'Failed to verify OTP');\r\n      throw error;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Logout function\r\n  const logout = () => {\r\n    // Remove token from localStorage\r\n    localStorage.removeItem('token');\r\n    \r\n    // Remove authorization header\r\n    delete api.defaults.headers.common['Authorization'];\r\n    \r\n    // Reset user state\r\n    setUser(null);\r\n    setIsAuthenticated(false);\r\n    setError('');\r\n  };\r\n\r\n  // Clear error\r\n  const clearError = () => {\r\n    setError('');\r\n  };\r\n\r\n  // Check if user has a specific role\r\n  const hasRole = (role) => {\r\n    if (!user || !user.role) return false;\r\n    \r\n    // Convert role to proper case (Engineer, Admin, Technician)\r\n    const normalizedRole = role.charAt(0).toUpperCase() + role.slice(1).toLowerCase();\r\n    return user.role === normalizedRole;\r\n  };\r\n\r\n  // Check if user is admin or engineer (full access)\r\n  const hasFullAccess = () => {\r\n    return hasRole('Admin') || hasRole('Engineer');\r\n  };\r\n\r\n  // Value object to be provided to consumers\r\n  const value = {\r\n    user,\r\n    isAuthenticated,\r\n    loading,\r\n    error,\r\n    requestOTP,\r\n    verifyOTP,\r\n    logout,\r\n    clearError,\r\n    hasRole,\r\n    hasFullAccess\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}